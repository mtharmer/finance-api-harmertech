# frozen_string_literal: true

require 'rails_helper'
require 'devise/jwt/test_helpers'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/debts', type: :request do
  let!(:user) { create(:user) }
  # sign_in(user)
  # This should return the minimal set of attributes required to create a valid
  # Debt. As you add validations to Debt, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    # skip("Add a hash of attributes valid for your model")
    {
      name: 'some name',
      original_balance: 5000,
      current_balance: 4000.25,
      apr: 3.6,
      original_term: 24,
      minimum_payment: 120.50
    }
  end

  let(:invalid_attributes) do
    # skip("Add a hash of attributes invalid for your model")
    {}
  end

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # DebtsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) do
    headers = { 'Accept' => 'application/json', 'Content-Type' => 'application/json' }
    Devise::JWT::TestHelpers.auth_headers(headers, user)
  end

  describe 'GET /index' do
    it 'renders a successful response' do
      user.debts.create! valid_attributes
      get debts_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      debt = user.debts.create! valid_attributes
      get debt_url(debt), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Debt' do
        expect do
          post debts_url,
               params: { debt: valid_attributes }, headers: valid_headers, as: :json
        end.to change(Debt, :count).by(1)
      end

      it 'renders a JSON response with the new debt' do
        post debts_url,
             params: { debt: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Debt' do
        expect do
          post debts_url,
               params: { debt: invalid_attributes }, headers: valid_headers, as: :json
        end.not_to change(Debt, :count)
      end

      it 'renders a JSON response with errors for the new debt' do
        post debts_url,
             params: { debt: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:bad_request)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          name: 'some name',
          original_balance: 5000,
          current_balance: 3879.75,
          apr: 3.6,
          original_term: 24,
          minimum_payment: 120.50
        }
      end

      it 'updates the requested debt' do
        debt = user.debts.create! valid_attributes
        patch debt_url(debt),
              params: { debt: new_attributes }, headers: valid_headers, as: :json
        debt.reload
        expect(debt.current_balance).to eq(3879.75)
      end

      it 'renders a JSON response with the debt' do
        debt = user.debts.create! valid_attributes
        patch debt_url(debt),
              params: { debt: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end

    context 'with invalid parameters' do
      it 'renders a JSON response with errors for the debt' do
        debt = user.debts.create! valid_attributes
        patch debt_url(debt),
              params: { debt: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:bad_request)
        expect(response.content_type).to match(a_string_including('application/json'))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested debt' do
      debt = user.debts.create! valid_attributes
      expect do
        delete debt_url(debt), headers: valid_headers, as: :json
      end.to change(Debt, :count).by(-1)
    end
  end
end
