require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/monthly_expenses", type: :request do
  let!(:user) { create(:user) }
  # This should return the minimal set of attributes required to create a valid
  # MonthlyExpense. As you add validations to MonthlyExpense, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: 'Some Expense',
      amount: 150.25,
      expense_type: 'Bill',
      due_day: 9
    }
  }

  let(:invalid_attributes) {
    # skip("Add a hash of attributes invalid for your model")
    # {}
    {
      name: nil,
      amount: 150.25,
      expense_type: 'Bill',
      due_day: 9
    }
  }

  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # MonthlyExpensesController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    headers = { 'Accept' => 'application/json', 'Content-Type' => 'application/json' }
    Devise::JWT::TestHelpers.auth_headers(headers, user)
  }

  describe "GET /index" do
    it "renders a successful response" do
      user.monthly_expenses.create! valid_attributes
      get monthly_expenses_url, headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      monthly_expense = user.monthly_expenses.create! valid_attributes
      get monthly_expense_url(monthly_expense), headers: valid_headers, as: :json
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new MonthlyExpense" do
        expect {
          post monthly_expenses_url,
               params: { monthly_expense: valid_attributes }, headers: valid_headers, as: :json
        }.to change(MonthlyExpense, :count).by(1)
      end

      it "renders a JSON response with the new monthly_expense" do
        post monthly_expenses_url,
             params: { monthly_expense: valid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:created)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "does not create a new MonthlyExpense" do
        expect {
          post monthly_expenses_url,
               params: { monthly_expense: invalid_attributes }, as: :json
        }.to change(MonthlyExpense, :count).by(0)
      end

      it "renders a JSON response with errors for the new monthly_expense" do
        post monthly_expenses_url,
             params: { monthly_expense: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: 'New Name Expense',
          amount: 150.26,
          expense_type: 'Subscription',
          due_day: 15
        }
      }

      it "updates the requested monthly_expense" do
        monthly_expense = user.monthly_expenses.create! valid_attributes
        patch monthly_expense_url(monthly_expense),
              params: { monthly_expense: new_attributes }, headers: valid_headers, as: :json
        monthly_expense.reload
        expect(monthly_expense.name).to eq(new_attributes[:name])
        expect(monthly_expense.amount).to eq(new_attributes[:amount])
      end

      it "renders a JSON response with the monthly_expense" do
        monthly_expense = user.monthly_expenses.create! valid_attributes
        patch monthly_expense_url(monthly_expense),
              params: { monthly_expense: new_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:ok)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end

    context "with invalid parameters" do
      it "renders a JSON response with errors for the monthly_expense" do
        monthly_expense = user.monthly_expenses.create! valid_attributes
        patch monthly_expense_url(monthly_expense),
              params: { monthly_expense: invalid_attributes }, headers: valid_headers, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
        expect(response.content_type).to match(a_string_including("application/json"))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested monthly_expense" do
      monthly_expense = user.monthly_expenses.create! valid_attributes
      expect {
        delete monthly_expense_url(monthly_expense), headers: valid_headers, as: :json
      }.to change(MonthlyExpense, :count).by(-1)
    end
  end
end
